// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  username String
  password String
  name String?
  icon Int @default(1)
  joinedAt DateTime
  aboutMe String?
  online Boolean @default(false)
  sentMessages Messages[]
  friendlist Friendships[]
  convos Conversations[]
  groups GroupChat[] @relation("groupsJoined")
  adminFor GroupChat[] @relation("groupsAdmin")
  sentRequest Requests[] @relation("sentRequests")
  receivedRequest Requests[] @relation("receiveRequests")
}

model Requests {
  id String @id @default(uuid())
  type Types
  sender User @relation("sentRequests", fields: [senderid], references: [id], onDelete: Cascade)
  senderid String
  receiver User @relation("receiveRequests", fields: [receiverid], references: [id], onDelete:  Cascade)
  group GroupChat? @relation(fields: [groupid], references: [id], onDelete: Cascade)
  groupid String?
  receiverid String
  sentAt DateTime
}

model GroupChat {
  id String @id @default(uuid())
  name String?
  admins User[] @relation("groupsAdmin")
  members User[] @relation("groupsJoined")
  contents Messages[]
  request Requests[]
}

model Conversations {
  id String @id @default(uuid())
  members User[]
  contents Messages[]
}

model Friendships {
  id String @id @default(uuid())
  users User[]
}

model Messages {
  id String @id @default(uuid())
  sentAt DateTime
  content String
  edited Boolean @default(false)
  sender User @relation(fields: [senderid], references: [id], onDelete: Cascade)
  senderid String
  convo Conversations? @relation(fields: [convoid], references: [id], onDelete: Cascade)
  convoid String?
  group GroupChat? @relation(fields: [groupid], references: [id], onDelete: Cascade)
  groupid String?
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt   DateTime
}

model Icons {
  id Int @id @default(autoincrement())
  source String
}

enum Types {
  FRIEND
  GROUP
}

